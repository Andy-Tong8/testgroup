{"version":3,"sources":["components/New.jsx","components/Navbar.jsx","components/Dashboard.jsx","components/DeleteButton.jsx","components/Show.jsx","components/Edit.jsx","App.js","serviceWorker.js","index.js"],"names":["New","useState","name","description","formState","setFormState","errorState","setErrorState","onChangeHandler","e","console","log","target","value","style","color","length","map","item","index","key","onSubmit","preventDefault","axios","post","then","response","data","errors","temp","push","message","navigate","catch","error","onChange","type","Navbar","props","to","Dashboard","state","setState","refresh","setRefresh","teamColors","useEffect","get","buttonHandler","buttonID","status","put","_id","globalIndex","backgroundColor","team","changeHandler","el","i","onClick","playerId","successCallback","window","confirm","delete","Show","id","DeleteButton","personId","Edit","App","className","path","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4d32ad32.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport axios from 'axios';\nimport {navigate} from '@reach/router'\n\nconst New = () => {\n    \n    const [formState,setFormState] = useState({\n        name: '',\n        description: ''\n    })\n    \n    const [errorState, setErrorState] = useState([])\n\n    const nameError = \"Name must be at least 2 characters\"\n    const descriptionError = \"Description must be at least 5 characters\"\n\n    const onSubmitHandler = (e)=>{\n        e.preventDefault()\n        axios.post('http://localhost:8000/api/create',formState)\n        .then(response => {\n            console.log(response)\n            if (response.data.errors) {\n                const temp = []\n                for(let key in response.data.errors) {\n                    temp.push(response.data.errors[key].message)\n                }\n                setErrorState([...temp])\n            } else {\n                console.log('success')\n                setFormState({\n                    name:'',\n                    description:'',\n                })\n                navigate(\"/add\")\n            }\n        })\n        .catch(error => console.log(error))\n    }\n\n    const onChangeHandler = (e)=>{\n        console.log('i am in onChange handler and formState is:',formState)\n        setFormState({\n            ...formState,[e.target.name]:e.target.value})\n        }\n\n    return (\n        <div>\n            <p style={{color:\"blue\"}}>{ formState.name.length > 0 && formState.name.length < 2 && nameError}</p>\n            <p style={{color:\"blue\"}}>{ formState.description.length > 0 && formState.description.length < 5 && descriptionError}</p>\n            {errorState.map((item, index) => (\n                <p style={{color:'red'}} key={index}>{item}</p>\n            ))}\n            <form onSubmit={onSubmitHandler}>\n                <p>Name:</p><input name=\"name\" onChange={onChangeHandler}type=\"text\"/>\n                <p>Description</p><input name=\"description\" onChange={onChangeHandler} type=\"text\"/>\n                <button type=\"submit\">Create</button>\n            </form>\n        </div>\n    )\n}\n\nexport default New\n","import React from 'react';\nimport {Link} from '@reach/router';\n\n\nconst Navbar = (props) => {\n\n    return(\n        <div>\n        <Link to ={\"/\"}>Teams</Link> \n        |\n        <Link to ={\"/player/status\"}> Player Status</Link>\n        \n    \n        </div>\n    )\n}\n\nexport default Navbar;\n\n\n// teams with the color they are on\n// roster of the players\n","import React, { useState, useEffect } from 'react';\nimport { navigate, Link } from '@reach/router';\nimport axios from 'axios';\n\nconst Dashboard = (props) => {\n    const [state, setState] = useState([]);\n    const [refresh, setRefresh] = useState(false);\n    const teamColors = ['white', 'red', 'blue', 'green']\n    useEffect(()=>{\n        axios.get('http://localhost:8000/api/find')\n        .then(response => setState(response.data))\n        .catch(error=>console.log(error))\n    },[refresh])\n\n    const buttonHandler = (e, item, buttonID) => {\n        console.log(item);\n        if(item.status[buttonID] === 0) {\n            item.status[buttonID] = 1;\n        } else {\n            item.status[buttonID] = 0;\n        }\n        axios.put(`http://localhost:8000/api/updateOne/${item._id}`, item)\n        .then(response => setRefresh(!refresh))\n        .catch(error=>console.log(error))\n    }\n    const changeHandler = (e, item) => {\n        item.team = e.target.value;\n        axios.put(`http://localhost:8000/api/updateOne/${item._id}`, item)\n        .then(response => setRefresh(!refresh))\n        .catch(error=>console.log(error))\n    }\n    return(\n        <div>\n            {teamColors.map((color, globalIndex) => (\n            <table style={{backgroundColor:color}} key={globalIndex}>\n                <thead>\n                    <tr>\n                        <th>Team</th>\n                        <th>Name</th>\n                        <th>Status</th>\n                    </tr>\n                    </thead>\n                        <tbody>\n                            {state.map((item, index) => (\n                                item.team === color ?\n                                <tr key={index}>\n                                    <td>\n                                        <select name=\"\" onChange={(e) => changeHandler(e, item)} value={item.team}>\n                                            {teamColors.map((el, i) => (\n                                                <option key={i} value={el}>{el}</option>\n                                            ))}\n                                        </select>\n                                        \n                                    </td>\n                                    <td><Link style={{color:'yellow'}} to={`/edit/${item._id}`}>{item.name}</Link></td> \n                                    <td>\n                                        <button onClick= {(e) => buttonHandler(e, item, 0)} style={{backgroundColor:item.status[0]===1?'green':'red'}}>{item.status[0] === 1 ? 'On' : 'Off'}</button>\n                                        <button onClick= {(e) => buttonHandler(e, item, 1)} style={{backgroundColor:item.status[1]===1?'green':'red'}}>{item.status[1] === 1 ? 'On' : 'Off'}</button>\n                                        <button onClick= {(e) => buttonHandler(e, item, 2)} style={{backgroundColor:item.status[2]===1?'green':'red'}}>{item.status[2] === 1 ? 'On' : 'Off'}</button>\n                                        <button onClick= {(e) => buttonHandler(e, item, 3)} style={{backgroundColor:item.status[3]===1?'green':'red'}}>{item.status[3] === 1 ? 'On' : 'Off'}</button>\n                                        <button onClick= {(e) => buttonHandler(e, item, 4)} style={{backgroundColor:item.status[4]===1?'green':'red'}}>{item.status[4] === 1 ? 'On' : 'Off'}</button>\n                                    </td>\n                                </tr>\n                                : null\n                            ))}\n                        </tbody>   \n            </table>\n            ))}\n        </div>\n    )\n}\n\nexport default Dashboard;                           ","import React from 'react'\nimport axios from 'axios';\n\nexport default props => {\n    const { playerId, successCallback } = props;\n    const deletePlayer = e => {\n        if(window.confirm('Delete the item?')){\n        axios.delete(`http://localhost:8000/api/deleteOne/`+playerId)\n        .then(response => successCallback())\n        .catch(error => console.log(error))\n        }\n    }\n    return (\n        <button style={{backgroundColor: \"red\", color: \"white\"}} onClick={deletePlayer}>Delete</button>\n    )\n}","import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport { navigate } from '@reach/router';\nimport DeleteButton from './DeleteButton';\n\nconst Show = (props) => {\n    const buttonOff={\n        backgroundColor: \"white\",\n        color: \"black\"\n      }\n      const buttonOn={\n        backgroundColor: \"green\",\n        color: \"white\"\n      }\n\n    const [state, setState] = useState({})\n    useEffect(() => {\n        console.log('you are in show component')\n        axios.get(`http://localhost:8000/api/findOne/${props.id}`)\n            .then(response => {\n                setState({ ...response.data })\n            })\n            .catch(error => console.log(error))\n    }, [])\n\n    const goToEdit = (e) => {\n        navigate(`/edit/${props.id}`);\n    }\n    const consoleLogMe = (e) => {\n        axios.get(`http://localhost:8000/api/find`)\n            .then(response => {\n                console.log(response.data )\n            })\n            .catch(error => console.log(error))\n    }\n    const deleteFromState = () => {\n        navigate('/dashboard')\n    }\n\n    return (\n        <div>\n            {state.name ?\n                <div>\n                    <h3>{state.name}</h3>\n                    <h5>{state.description}</h5>\n                    <h5>\n                        \n                        {/* {state.status.map((val,index)=>{\n                           <p>Game {index+1}</p>\n                           // <button {val==1 ? style={buttonOn} : style={buttonOff}}>Game {index+1}</button> \n                        })} */}\n                    </h5>\n                    <h5>{state.team}team should go here</h5>\n                    <button onClick={consoleLogMe}>consolelog my database</button> |&nbsp;\n                    <button onClick={goToEdit}>Edit</button> |&nbsp;\n                    <DeleteButton personId = {props.id} successCallback = {()=>deleteFromState()} />\n                </div>\n            : <div>\n                <h5>Show Component Says: \"backend is down :(\"</h5>\n                <h5>ERR_CONNECTION_REFUSED OH NO!</h5>\n              </div>\n\n                        \n            }\n            \n        </div>\n    )\n}\n\nexport default Show\n","import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport {navigate} from '@reach/router'\n\nconst Edit = (props) => {\n    \n    const [formState,setFormState] = useState({\n        name: \"\",\n        description: \"\"\n    })\n    useEffect(() => {\n        axios.get(`http://localhost:8000/api/findOne/${props.id}`)\n        .then(response => setFormState(response.data))\n        .catch(error => console.log(error))\n        \n    }, [props.id])\n    const [errorState, setErrorState] = useState([])\n\n    const nameError = \"Name must be at least 2 characters\"\n    const descriptionError = \"Description must be at least 5 characters\"\n\n    const onSubmitHandler = (e)=>{\n        e.preventDefault()\n        axios.put(`http://localhost:8000/api/updateOne/${formState._id}`,formState)\n        .then(response => {\n            if (response.data.errors) {\n                const temp = []\n                for(let key in response.data.errors) {\n                    temp.push(response.data.errors[key].message)\n                }\n                setErrorState([...temp])\n            } else {\n                navigate(\"/dashboard\")\n            }\n        })\n        .catch(error => console.log(error))\n    }\n\n    const onChangeHandler = (e)=>{\n        setFormState({\n            ...formState,[e.target.name]:e.target.value})\n        }\n\n    return (\n        <div>\n            <p style={{color:\"blue\"}}>{ formState.name.length > 0 && formState.name.length < 2 && nameError}</p>\n            <p style={{color:\"blue\"}}>{ formState.description.length > 0 && formState.description.length < 5 && descriptionError}</p>\n            {errorState.map((item, index) => (\n                <p style={{color:'red'}} key={index}>{item}</p>\n            ))}\n            <form onSubmit={onSubmitHandler}>\n                <p>Name:</p><input name=\"name\" onChange={onChangeHandler} type=\"text\" value={formState.name}/>\n                <p>Description</p><input name=\"description\" onChange={onChangeHandler} type=\"text\" value={formState.description}/>\n                <button type=\"submit\">Update</button>\n            </form>\n        </div>\n    )\n}\n\nexport default Edit\n\n","import React from 'react';\nimport './App.css';\nimport { Router, Link } from '@reach/router';\nimport New from './components/New';\nimport Navbar from './components/Navbar';\nimport Dashboard from './components/Dashboard';\nimport Show from './components/Show'\nimport Edit from './components/Edit';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Router>\n        <Dashboard path=\"/dashboard\" />\n        <New path=\"/add\" />\n        <Show path=\"/show/:id\" />\n        <Edit path=\"/edit/:id\" />\n      </Router>\n      <div className=\"router\">\n        <h1> <Link to=\"/add\"> Add Player </Link></h1>\n        <h4><Link to=\"/show/1\"> Show Player (should be linked from dashboard) </Link></h4>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}